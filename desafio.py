from googleapiclient.discovery import build
import pandas as pd
import plotly.express as px
from dash import Dash, html, dcc

API_KEY = 'AIzaSyCvbxSrVjyh0Dq11kXv23bdyJ2gGxhRHL0'
youtube = build('youtube', 'v3', developerKey=API_KEY)

playlist_id = 'PLfoNZDHitwjUv0pjTwlV1vzaE0r7UDVDR'

def buscar_videos(youtube, playlist_id):
    resultados = youtube.playlistItems().list(
        part='snippet',
        playlistId=playlist_id,
        maxResults=25
    ).execute()
    return resultados['items']

def estatisticas(youtube, videos):
    video_ids = [item['snippet']['resourceId']['videoId'] for item in videos]

    resposta = youtube.videos().list(
        part= 'statistics',
        id=','.join(video_ids)
    ).execute()
    stats = {} #dicionario 
    for item in resposta['items']: #percorre cada video da lista
        stats[item['id']] = item['statistics'] #para cada video salva no dicionario suas estatisticas 
    return stats

def dataFreme(videos, stats):
    dados = []

    for item in videos:
        snippet = item['snippet']
        video_id = snippet['resourceId'] ['videoId']
        titulo = snippet['title']
        data = snippet['publishedAt'][:10]
        status = stats.get(video_id, {})

        dados.append({
            'T√≠tulo': titulo,
            'Data': data,
            'Visualiza√ß√µes': int(status.get('viewCount', 0)),
            'Curtidas': int(status.get('likeCount', 0)),
            'Coment√°rios': int(status.get('commentCount', 0)),
        })
    return pd.DataFrame(dados)

def dashboard(df):

    app = Dash(__name__)

    fig_curtidas = px.bar(df, x='T√≠tulo', y='Curtidas', title='Curtidas por v√≠deo')
    fig_comentarios = px.bar(df, x='Coment√°rios', y='T√≠tulo', orientation='h', title='Coment√°rios por v√≠deo')

    fig_relacao = px.scatter(df, x='Curtidas', y='Coment√°rios', text='T√≠tulo', title='Curtidas vs Coment√°rios por V√≠deo',
    labels={'Curtidas': 'N√∫mero de Curtidas', 'Coment√°rios': 'N√∫mero de Coment√°rios'})
    fig_relacao.update_traces(textposition='top center')

    fig_tempoPorVisu = px.line( df, x='Data', y='Visualiza√ß√µes', hover_name='T√≠tulo', title='Evolu√ß√£o das Visualiza√ß√µes por Data', markers=True)
    media = df['Visualiza√ß√µes'].mean()
    fig_tempoPorVisu.add_hline(y=media, line_dash="dash", line_color="red", annotation_text=f"M√©dia: {int(media):,} views", annotation_position="bottom right")

    top10 = df.sort_values(by='Visualiza√ß√µes', ascending=False).head(10)
    top10['T√≠tulo Rankeado'] = [f"{i+1}¬∫ - {titulo}" for i, titulo in enumerate(top10['T√≠tulo'])]
    fig_top10_pizza = px.pie(top10, names='T√≠tulo Rankeado', values='Visualiza√ß√µes', title='Distribui√ß√£o de Visualiza√ß√µes - Top 10 V√≠deos (Com Ranking)')
    fig_top10_pizza.update_traces(textinfo='percent+label')

    fig_viz_likes = px.scatter(top10, x='Visualiza√ß√µes', y='Curtidas', text='T√≠tulo', title='Visualiza√ß√µes vs Curtidas')

    df['Engajamento (%)'] = ((df['Curtidas'] + df['Coment√°rios']) / df['Visualiza√ß√µes']) * 100
    fig_engajamento = px.bar(df.sort_values(by='Engajamento (%)', ascending=False), x='T√≠tulo', y='Engajamento (%)', title='Engajamento Relativo por V√≠deo (Ordenado)')

    df['Faixa de Views'] = pd.cut(df['Visualiza√ß√µes'], bins=3, labels=['Pouco visto', 'M√©dio', 'Muito visto'])

    fig_bar_engajamento = px.bar(df.sort_values(by='Visualiza√ß√µes'), x='T√≠tulo', y='Engajamento (%)', color='Faixa de Views', title='Engajamento Relativo por V√≠deo (Classificado por Visualiza√ß√µes)')

    app.layout = html.Div([
        html.H1("Dashboard YouTube - Highlights F1 2024"),
        html.P("Esse dashboard apresenta uma an√°lise dos v√≠deos de highlights da temporada 2024 de F1 publicados no canal oficial. Abaixo, exploramos os v√≠deos com maior desempenho em visualiza√ß√µes, curtidas e coment√°rios."),
        html.Hr(),

        html.P("V√≠deos com nomes de circuitos espec√≠ficos e recentes atraem mais curtidas ‚Äî possivelmente por estarem atrelados a corridas populares ou finais emocionantes. Como √© o caso do GP do Canad√°, √Åustria, S√£o Paulo, Monaco e Miami "),
        dcc.Graph(figure=fig_curtidas),

        html.P("V√≠deos com momentos pol√™micos, acidentes ou finais surpreendentes tendem a gerar mais coment√°rios ‚Äî demonstrando maior envolvimento emocional do p√∫blico. Como √© o caso do GP da Hungria, que teve a polemica da McLaren"),
        dcc.Graph(figure=fig_comentarios),

         html.P("Qual √© a Correla√ß√£o entre Curtidas e Comentarios? Os v√≠deos mais curtidos s√£o os mais Comentados ou os mais Comentados s√£o os mais curtidos?"),
        html.P(["Existe uma ", html.Strong("correla√ß√£o positiva"), " clara entre curtidas e coment√°rios. Quanto mais curtidas um v√≠deo tem, maior tende a ser seu n√∫mero de coment√°rios."]),
        html.P("Alguns v√≠deos, como o GP da Hungria e o GP da Austr√°lia, se destacam acima da linha de tend√™ncia, indicando que geraram coment√°rios al√©m do esperado para o n√∫mero de curtidas."),
        dcc.Graph(figure=fig_relacao),

        html.P("Os circuitos mais tradicionais ou com maior apelo midi√°tico (Austr√°lia, M√¥naco, S√£o Paulo) tendem a gerar maior curiosidade e tr√°fego org√¢nico no canal. Essas corridas provavelmente foram marcantes na temporada."),
        dcc.Graph(figure=fig_top10_pizza),

        html.P("Os v√≠deos mais visualizados tamb√©m s√£o os mais curtidos?"),
        html.P("Curtidas n√£o dependem apenas do n√∫mero de visualiza√ß√µes, mas tamb√©m da qualidade percebida, emo√ß√£o ou relev√¢ncia da corrida. Corridas mais intensas ou com desfechos inesperados tendem a gerar mais likes por view."),
        dcc.Graph(figure=fig_viz_likes),

        html.P("Falando em visualiza√ß√µes, o interesse do p√∫blico aumentou ou caiu ao longo da temporada?"),
        html.P("Corridas lan√ßadas no in√≠cio da temporada de 2024 despertaram mais interesse e geraram visualiza√ß√µes muito acima da m√©dia. J√° no fim do ano, o engajamento caiu, sugerindo que o pico de aten√ß√£o ocorre nos primeiros meses"),
        html.P("A linha vermelha mostra a m√©dia de visualiza√ß√µes ao longo do tempo. Picos acima da m√©dia indicam corridas que despertaram mais aten√ß√£o do p√∫blico."),
        dcc.Graph(figure=fig_tempoPorVisu),

        html.P("V√≠deos com alto engajamento nem sempre s√£o os mais visualizados!"),
        html.P("GP de Miami e GP da Gr√£-Bretanha aparecem no topo em engajamento mesmo sem estarem entre os mais visualizados. Isso sugere que esses v√≠deos provocaram forte rea√ß√£o emocional, levando o p√∫blico a interagir mais ‚Äî seja curtindo ou comentando."),
        dcc.Graph(figure= fig_engajamento),

        html.P("O maior engajamento est√° no grupo M√©dio! "),
        html.P("Os dois maiores picos de engajamento est√£o nos v√≠deos com visualiza√ß√µes intermedi√°rias. Isso pode indicar que corridas intensas ou emocionantes, mesmo com p√∫blico menor, ativaram mais o engajamento emocional (likes + coment√°rios)."),
        dcc.Graph(figure=fig_bar_engajamento),

        encerramento()
    ])
    app.run(debug=True)

def encerramento():
    return html.Div([
        html.H2("üèÅ Encerramento: A Temporada Al√©m da Pista"),
        html.P("Ao longo da temporada 2024 da F√≥rmula 1, n√£o foi apenas nas curvas e ultrapassagens que as emo√ß√µes aconteceram ‚Äî elas tamb√©m explodiram nos bastidores digitais do YouTube."),
        html.P("üîç Nossa an√°lise mergulhou fundo nas rea√ß√µes do p√∫blico aos v√≠deos de highlights, revelando que:"),
        html.Ul([
            html.Li("Corridas populares como Austr√°lia, M√¥naco e S√£o Paulo garantiram milh√µes de visualiza√ß√µes, mas..."),
            html.Li("...foi em momentos mais intensos, inesperados ou pol√™micos ‚Äî como o GP da Hungria ‚Äî que o verdadeiro engajamento aconteceu.")
        ]),
        html.P("‚ú® Curtidas e coment√°rios mostraram que, quando uma corrida toca o emocional do torcedor, ela transcende os n√∫meros. √Äs vezes, um v√≠deo 'm√©dio' em audi√™ncia deixa uma marca maior que os gigantes em visualiza√ß√µes."),
        html.P("üìà A jornada tamb√©m mostrou que o interesse do p√∫blico flutua ao longo da temporada, com picos iniciais e quedas no fim do ano ‚Äî talvez o reflexo da narrativa esportiva se esgotando, ou da previsibilidade crescendo."),
        html.Blockquote("üéØ E o que aprendemos com tudo isso? Que no mundo digital, mais do que ser visto, √© preciso ser sentido. O p√∫blico n√£o quer apenas assistir corridas ‚Äî ele quer viver as corridas."),
        html.H3("üèÜ Obrigado por acompanhar essa an√°lise!"),
        html.P("Esse dashboard √© mais do que n√∫meros: √â uma forma de ouvir a voz dos f√£s, entender seus sentimentos e mapear o impacto que o esporte gera fora das pistas."),
    ], style={
        'marginTop': '50px',
        'padding': '20px',
        'backgroundColor': '#f9f9f9',
        'borderRadius': '10px',
        'boxShadow': '0 4px 8px rgba(0, 0, 0, 0.1)',
        'fontFamily': 'Arial, sans-serif'
    })

if __name__ == '__main__':
    videos = buscar_videos(youtube, playlist_id)
    stats = estatisticas(youtube, videos)

    df = dataFreme(videos, stats)
    dashboard(df)